{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/emreeryigit/Documents/coding/againreact_Max/23advNEXT/pages/[meetupId].js\";\nimport React from 'react';\nimport MeetupDetail from '../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetup.image,\n      title: props.meetup.title,\n      address: props.meetup.address,\n      description: props.meetup.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails; // import { MongoClient, ObjectId } from \"mongodb\";\n// import MeetupDetail from \"../components/meetups/MeetupDetail\";\n// function MeetupDetails(props) {\n//   return (\n//     <MeetupDetail\n//       image={props.meetupData.image}\n//       title={props.meetupData.title}\n//       address={props.meetupData.address}\n//       description={props.meetupData.description}\n//     />\n//   );\n// }\n// export async function getStaticPaths() {\n//   const client = await MongoClient.connect(\n//     \"mongodb+srv://Emre_DB:808OC7zLkQgVqzk1@cluster0.pvcaw.mongodb.net/meetups?retryWrites=true&w=majority\"\n//   );\n//   const db = client.db();\n//   const meetupsCollection = db.collection(\"meetups\");\n//   const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n//   client.close();\n//   return {\n//     fallback: false,\n//     paths: meetups.map((meetup) => ({\n//       params: { meetupId: meetup._id.toString() },\n//     })),\n//   };\n// }\n// export async function getStaticProps(context) {\n//   // fetch data for a single meetup\n//   const meetupId = context.params.meetupId;\n//     console.log(meetupId);\n//   const client = await MongoClient.connect(\n//     \"mongodb+srv://Emre_DB:808OC7zLkQgVqzk1@cluster0.pvcaw.mongodb.net/meetups?retryWrites=true&w=majority\"\n//   );\n//   const db = client.db();\n//   const meetupsCollection = db.collection(\"meetups\");\n//   const selectedMeetup = await meetupsCollection.findOne({\n//     _id: ObjectId(meetupId),\n//   });\n//   client.close();\n//   return {\n//     props: {\n//       meetupData: {\n//         id: selectedMeetup._id.toString(),\n//         title: selectedMeetup.title,\n//         address: selectedMeetup.address,\n//         image: selectedMeetup.image,\n//         description: selectedMeetup.description,\n//       },\n//     },\n//   };\n// }\n// export default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/emreeryigit/Documents/coding/againreact_Max/23advNEXT/pages/[meetupId].js"],"names":["React","MeetupDetail","MeetupDetails","props","console","log","meetup","image","title","address","description"],"mappings":";;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACF,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACA,QAAC,YAAD;AAAe,MAAA,KAAK,EAAEA,KAAK,CAACG,MAAN,CAAaC,KAAnC;AACE,MAAA,KAAK,EAAEJ,KAAK,CAACG,MAAN,CAAaE,KADtB;AAEE,MAAA,OAAO,EAAEL,KAAK,CAACG,MAAN,CAAaG,OAFxB;AAGE,MAAA,WAAW,EAAEN,KAAK,CAACG,MAAN,CAAaI;AAH5B;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;KAXQR,a;;AAqDT,eAAeA,aAAf,C,CAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\n\nimport React from 'react'\nimport MeetupDetail from '../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n    console.log(props);\n  return (\n    <React.Fragment>\n    <MeetupDetail  image={props.meetup.image}\n      title={props.meetup.title}\n      address={props.meetup.address}\n      description={props.meetup.description}  />\n\n    </React.Fragment>\n  )\n}\nexport async function getStaticPaths() {\n    const client = await MongoClient.connect(\"mongodb+srv://Emre_DB:808OC7zLkQgVqzk1@cluster0.pvcaw.mongodb.net/meetups?retryWrites=true&w=majority\")\n    const db = client.db()\n    const meetupsCollection = db.collection(\"meetups\")\n    const meetups = await meetupsCollection.find({}, {_id: 1}).toArray()\n    client.close()\n    return {\n        paths: meetups.map(meetup => ({\n            params: {\n                meetupId: meetup._id.toString()\n            }\n        })),\n        fallback: false\n    }\n}\nexport async function getStaticProps (context) {\n    \n    const meetupId = context.params.meetupId;\n    const client = await MongoClient.connect(\"mongodb+srv://Emre_DB:808OC7zLkQgVqzk1@cluster0.pvcaw.mongodb.net/meetups?retryWrites=true&w=majority\")\n    const db = client.db()\n    const meetupsCollection = db.collection(\"meetups\")\n    const selectedMeetup = await meetupsCollection.findOne({\n        _id: ObjectId(meetupId),\n      })\n    client.close()\n    \n    // fetch meetups from the API\n    return {\n        props: {\n            meetup: {\n                id: selectedMeetup._id.toString(),\n                title: selectedMeetup.title,\n                address: selectedMeetup.address,\n                image: selectedMeetup.image,\n                description: selectedMeetup.description,\n              },\n        },\n        revalidate: 10\n    }\n}\n\nexport default MeetupDetails\n\n\n\n\n\n\n\n// import { MongoClient, ObjectId } from \"mongodb\";\n\n// import MeetupDetail from \"../components/meetups/MeetupDetail\";\n\n// function MeetupDetails(props) {\n//   return (\n//     <MeetupDetail\n//       image={props.meetupData.image}\n//       title={props.meetupData.title}\n//       address={props.meetupData.address}\n//       description={props.meetupData.description}\n//     />\n//   );\n// }\n\n// export async function getStaticPaths() {\n//   const client = await MongoClient.connect(\n//     \"mongodb+srv://Emre_DB:808OC7zLkQgVqzk1@cluster0.pvcaw.mongodb.net/meetups?retryWrites=true&w=majority\"\n//   );\n//   const db = client.db();\n\n//   const meetupsCollection = db.collection(\"meetups\");\n\n//   const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n//   client.close();\n\n//   return {\n//     fallback: false,\n//     paths: meetups.map((meetup) => ({\n//       params: { meetupId: meetup._id.toString() },\n//     })),\n//   };\n// }\n\n// export async function getStaticProps(context) {\n//   // fetch data for a single meetup\n\n//   const meetupId = context.params.meetupId;\n//     console.log(meetupId);\n//   const client = await MongoClient.connect(\n//     \"mongodb+srv://Emre_DB:808OC7zLkQgVqzk1@cluster0.pvcaw.mongodb.net/meetups?retryWrites=true&w=majority\"\n//   );\n//   const db = client.db();\n\n//   const meetupsCollection = db.collection(\"meetups\");\n\n//   const selectedMeetup = await meetupsCollection.findOne({\n//     _id: ObjectId(meetupId),\n//   });\n\n//   client.close();\n\n//   return {\n//     props: {\n//       meetupData: {\n//         id: selectedMeetup._id.toString(),\n//         title: selectedMeetup.title,\n//         address: selectedMeetup.address,\n//         image: selectedMeetup.image,\n//         description: selectedMeetup.description,\n//       },\n//     },\n//   };\n// }\n\n// export default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}